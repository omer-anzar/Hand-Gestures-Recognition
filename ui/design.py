# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import time
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as viz_utils
from object_detection.builders import model_builder
from object_detection.utils import config_util
import tensorflow as tf
import numpy as np

WORKSPACE_PATH = 'Tensorflow/workspace'
CUSTOM_MODEL_NAME = 'my_ssd_mobnet'
MODEL_PATH = WORKSPACE_PATH+'/models'
CONFIG_PATH = MODEL_PATH+'/'+CUSTOM_MODEL_NAME+'/pipeline.config'
CHECKPOINT_PATH = MODEL_PATH+'/my_ssd_mobnet/'
ANNOTATION_PATH = WORKSPACE_PATH+'/annotations'

# Load pipeline config and build a detection model

configs = config_util.get_configs_from_pipeline_file(CONFIG_PATH)
detection_model = model_builder.build(model_config=configs['model'], is_training=False)

# Restore checkpoint
ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)
ckpt.restore(os.path.join(CHECKPOINT_PATH, 'ckpt-11')).expect_partial()

@tf.function
def detect_fn(image):
    image, shapes = detection_model.preprocess(image)
    prediction_dict = detection_model.predict(image, shapes)
    detections = detection_model.postprocess(prediction_dict, shapes)
    return detections

category_index = label_map_util.create_category_index_from_labelmap(ANNOTATION_PATH+'/label_map.pbtxt')


# PYQT UI-----------------------------------------------------------------------------------------------------------

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(860, 500)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icon_pics/windows_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("font: 8pt \"MS Shell Dlg 2\";")
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(35, 39, 42);\n"
"\n"
"\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox_camera = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_camera.setStyleSheet("background-color: transparent;\n"
"color: rgb(255, 255, 255);\n"
"")
        self.groupBox_camera.setObjectName("groupBox_camera")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_camera)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_video = QtWidgets.QLabel(self.groupBox_camera)
        self.label_video.setEnabled(True)
        self.label_video.setMinimumSize(QtCore.QSize(0, 0))
        self.label_video.setMaximumSize(QtCore.QSize(700, 500))
        self.label_video.setAutoFillBackground(False)
        self.label_video.setStyleSheet("color: rgb(255, 255, 255);\n"
"background:transparent;\n"
"")
        self.label_video.setAlignment(QtCore.Qt.AlignCenter)
        self.label_video.setObjectName("label_video")
        self.verticalLayout.addWidget(self.label_video)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_left = QtWidgets.QPushButton(self.groupBox_camera)
        self.btn_left.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icon_pics/camera_52px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_left.setIcon(icon1)
        self.btn_left.setObjectName("btn_left")
        self.horizontalLayout_3.addWidget(self.btn_left)
        self.btn_power = QtWidgets.QPushButton(self.groupBox_camera)
        self.btn_power.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icon_pics/power.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_power.setIcon(icon2)
        self.btn_power.setObjectName("btn_power")
        self.horizontalLayout_3.addWidget(self.btn_power)
        self.btn_right = QtWidgets.QPushButton(self.groupBox_camera)
        self.btn_right.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"\n"
"")
        self.btn_right.setIcon(icon1)
        self.btn_right.setObjectName("btn_right")
        self.horizontalLayout_3.addWidget(self.btn_right)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout.addWidget(self.groupBox_camera)
        self.groupBox_message = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_message.setStyleSheet("background-color: transparent;\n"
"gridline-color: rgb(88, 101, 242);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_message.setObjectName("groupBox_message")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_message)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_photo = QtWidgets.QLabel(self.groupBox_message)
        self.label_photo.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_photo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_photo.setObjectName("label_photo")
        self.verticalLayout_3.addWidget(self.label_photo)
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setObjectName("formLayout_4")
        self.label_3 = QtWidgets.QLabel(self.groupBox_message)
        self.label_3.setMinimumSize(QtCore.QSize(0, 23))
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 23))
        self.label_3.setStyleSheet("background-color: rgb(88, 101, 242);\n"
"color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.label_3)
        self.btn_clear = QtWidgets.QPushButton(self.groupBox_message)
        self.btn_clear.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icon_pics/clear_symbol_52px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_clear.setIcon(icon3)
        self.btn_clear.setObjectName("btn_clear")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.btn_clear)
        self.TextEdit_current_message = QtWidgets.QPlainTextEdit(self.groupBox_message)
        self.TextEdit_current_message.setStyleSheet("background-color: rgb(44, 47, 51);")
        self.TextEdit_current_message.setReadOnly(True)
        self.TextEdit_current_message.setObjectName("TextEdit_current_message")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.TextEdit_current_message)
        self.btn_deleteall = QtWidgets.QPushButton(self.groupBox_message)
        self.btn_deleteall.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icon_pics/delete_bin.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_deleteall.setIcon(icon4)
        self.btn_deleteall.setObjectName("btn_deleteall")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.btn_deleteall)
        self.btn_copy = QtWidgets.QPushButton(self.groupBox_message)
        self.btn_copy.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/icon_pics/copy_48px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_copy.setIcon(icon5)
        self.btn_copy.setObjectName("btn_copy")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.btn_copy)
        self.label_2 = QtWidgets.QLabel(self.groupBox_message)
        self.label_2.setMinimumSize(QtCore.QSize(0, 0))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 23))
        self.label_2.setStyleSheet("background-color: rgb(88, 101, 242);\n"
"color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.label_2)
        self.TextEdit_confirm_message = QtWidgets.QPlainTextEdit(self.groupBox_message)
        self.TextEdit_confirm_message.setStyleSheet("background-color: rgb(44, 47, 51);")
        self.TextEdit_confirm_message.setObjectName("TextEdit_confirm_message")
        self.formLayout_4.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.TextEdit_confirm_message)
        self.btn_delete = QtWidgets.QPushButton(self.groupBox_message)
        self.btn_delete.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"")
        self.btn_delete.setIcon(icon4)
        self.btn_delete.setObjectName("btn_delete")
        self.formLayout_4.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.btn_delete)
        self.btn_send = QtWidgets.QPushButton(self.groupBox_message)
        self.btn_send.setAutoFillBackground(False)
        self.btn_send.setStyleSheet("background-color: rgb(44, 47, 51);\n"
"color: rgb(255, 255, 255);\n"
"\n"
"")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/icon_pics/sendicon1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_send.setIcon(icon6)
        self.btn_send.setCheckable(False)
        self.btn_send.setAutoDefault(False)
        self.btn_send.setDefault(False)
        self.btn_send.setFlat(False)
        self.btn_send.setObjectName("btn_send")
        self.formLayout_4.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.btn_send)
        self.verticalLayout_3.addLayout(self.formLayout_4)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout.addWidget(self.groupBox_message)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 860, 19))
        self.menubar.setObjectName("menubar")
        self.credits = QtWidgets.QMenu(self.menubar)
        self.credits.setObjectName("credits")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.umar = QtWidgets.QAction(MainWindow)
        self.umar.setObjectName("umar")
        self.anas = QtWidgets.QAction(MainWindow)
        self.anas.setObjectName("anas")
        self.ahmed = QtWidgets.QAction(MainWindow)
        self.ahmed.setObjectName("ahmed")
        self.muqsit = QtWidgets.QAction(MainWindow)
        self.muqsit.setObjectName("muqsit")
        self.seatno_name = QtWidgets.QAction(MainWindow)
        self.seatno_name.setObjectName("seatno_name")
        self.credits.addAction(self.seatno_name)
        self.credits.addSeparator()
        self.credits.addAction(self.umar)
        self.credits.addAction(self.anas)
        self.credits.addAction(self.ahmed)
        self.credits.addAction(self.muqsit)
        self.credits.addSeparator()
        self.menubar.addAction(self.credits.menuAction())


        #NOT AUTOGENRATED CODE----------------------------------------------------------------------------------

        #VARIABLES----------------------------------------------------------------------------------
        self.percentage = 70            #percentage at which Image Words are selected
        self.sentenceArray = []         #words makes up into an array


        #Btn function
        self.btn_power.clicked.connect(self.Btn_power)                      #CAMERA POWER BTN
        self.btn_left.clicked.connect(self.Btn_left_camera)                 #CHANGE CAMERA
        self.btn_right.clicked.connect(self.Btn_right_camera)               #CHANGE CAMERA
        self.btn_clear.clicked.connect(self.Backspace_current_message)      #APPLY BACKSPACE IN CURRENT MESSAGE
        self.btn_deleteall.clicked.connect(self.Delete_current_message)     #DELETE CURRENT MESSAGE
        self.btn_copy.clicked.connect(self.CopyTo_confirmMessage)           #COPY ARRAY TO CONFIRM MESSAGE
        self.btn_delete.clicked.connect(self.Delete_confrim_message)        #DELETE CONFIRM MESSAGE



        #THREAD and CAMERA--------------------------------------------------------------------------
        self.powerOff = True
        self.Worker1 = Worker1()
        #self.Worker1.start()
        #self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        #self.Worker1.LabelUpdate.connect(self.LabelUpdateSlot)


        # AUTOMATED----------------------------------------------------------------------------------
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hand gestures recognition "))
        self.groupBox_camera.setTitle(_translate("MainWindow", "Camera"))
        self.label_video.setText(_translate("MainWindow", "VIDEO"))
        self.btn_left.setText(_translate("MainWindow", "LEFT"))
        self.btn_power.setText(_translate("MainWindow", "ON/OFF"))
        self.btn_right.setText(_translate("MainWindow", "RIGHT"))
        self.groupBox_message.setTitle(_translate("MainWindow", "Message"))
        self.label_photo.setText(_translate("MainWindow", "---"))
        self.label_3.setText(_translate("MainWindow", "CURRENT MESSAGE"))
        self.btn_clear.setText(_translate("MainWindow", "CLEAR"))
        self.btn_deleteall.setText(_translate("MainWindow", "DELETE"))
        self.btn_copy.setText(_translate("MainWindow", "COPY"))
        self.label_2.setText(_translate("MainWindow", "CONFIRMED MESSAGE"))
        self.btn_delete.setText(_translate("MainWindow", "DELETE"))
        self.btn_send.setText(_translate("MainWindow", "SEND"))
        self.credits.setTitle(_translate("MainWindow", "Credits"))
        self.umar.setText(_translate("MainWindow", "B19102104 Muhammad Umar Anzar"))
        self.anas.setText(_translate("MainWindow", "B19102068 Muhammad Anas Rashid"))
        self.ahmed.setText(_translate("MainWindow", "B19102010 Ahmed Haseeb"))
        self.muqsit.setText(_translate("MainWindow", "B19102004 Abdul Muqsit"))
        self.seatno_name.setText(_translate("MainWindow", "Seat No#   Name"))

    # MESSAGE BOX FUNCTIONS----------------------------------------------------------------------------------

    def Display_currentMessage(self):
        # UPDATE current message box
        self.TextEdit_current_message.setPlainText(str(self.sentenceArray))

    def Display_confrimMessage(self, sentence):
        # UPDATE confirm message box
        self.TextEdit_confirm_message.setPlainText(sentence)

    def Backspace_current_message(self):
        #remove last element from array
        del self.sentenceArray[-1]
        self.Display_currentMessage()

    def Delete_current_message(self):
        # DELETE whole array
        self.sentenceArray = []
        self.Display_currentMessage()

    def CopyTo_confirmMessage(self):
        #COPY array to message with whitespace
        sentence = self.TextEdit_confirm_message.toPlainText() + " ".join(self.sentenceArray)
        self.Display_confrimMessage(sentence)

    def Delete_confrim_message(self):
        # DELETE whole confirm message
        self.Display_confrimMessage("")

    def Send_confrim_message(self):
        pass



    def AppendInSetenceArray(self, word):
        
        #Checking whether array is not empty
        if len(self.sentenceArray) > 0:  

            #if new word is not equal to the last word in array THEN ADD IT
            if word != self.sentenceArray[-1]:  
                self.sentenceArray.append(word)

        else:
            #Append if array is empty
            self.sentenceArray.append(word) 




    def LabelUpdateSlot(self, label_score):
        # if label score exist(not none) then use only which is this % higher
        if label_score:
            if label_score.find(':') != -1:      
                label_score_arr = label_score.split(":")
                score = eval(label_score_arr[1].strip()[:-1]) #score value

                # only those which has higher percentage
                if score > self.percentage:
                    print(label_score_arr[0], score) # label name
                    self.AppendInSetenceArray( label_score_arr[0] ) #append in sentence array
                    self.Display_currentMessage() #Display in GUI current message

    def ImageUpdateSlot(self, Image):
        self.label_video.setPixmap(QPixmap.fromImage(Image))

    # ALL CAMERA FUNCTIONS----------------------------------------------------------------------------------
    def Btn_power(self):
        # POWER btn
        if self.powerOff:
            print("CAMERA:","ON")
            self.Worker1.start()
            self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
            self.Worker1.LabelUpdate.connect(self.LabelUpdateSlot)
            self.powerOff = False
        else:
            print("CAMERA:","OFF")
            self.CancelFeed()
            self.powerOff = True

    
    def Btn_left_camera(self):
        # change camera btn
        print("CAMERA:",self.Worker1.camera)
        if 0 < self.Worker1.camera:
            self.Worker1.camera -= 1
            
    def Btn_right_camera(self):
        # change camera btn
        print("CAMERA:",self.Worker1.camera)
        if self.Worker1.camera < 5:
            self.Worker1.camera += 1

    def CancelFeed(self):
        # function to stop camera feed
        self.Worker1.stop()





# MULTI THREADING CLASS FOR CAMERA---------------------------------------------------------------
import cv2 
class Worker1(QThread):
    default = 0
    camera = 1
    ImageUpdate = pyqtSignal(QImage)
    LabelUpdate = pyqtSignal(['QString'])
    def run(self):
        self.ThreadActive = True
        cap = cv2.VideoCapture(self.camera)
        # width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        # height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        while self.ThreadActive:
            ret, frame = cap.read()
            image_np = np.array(frame)
            
            input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
            try:
                detections = detect_fn(input_tensor)
            except Exception as e:
                self.camera = self.default
                continue
            
            num_detections = int(detections.pop('num_detections'))
            detections = {key: value[0, :num_detections].numpy()
                          for key, value in detections.items()}
            detections['num_detections'] = num_detections

            # detection_classes should be ints.
            detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

            label_id_offset = 1
            image_np_with_detections = image_np.copy()

            _,label_score=viz_utils.visualize_boxes_and_labels_on_image_array(
                        image_np_with_detections,
                        detections['detection_boxes'],
                        detections['detection_classes']+label_id_offset,
                        detections['detection_scores'],
                        category_index,
                        use_normalized_coordinates=True,
                        max_boxes_to_draw=5,
                        min_score_thresh=.5,
                        agnostic_mode=False)

            #emit(return) out label with %
            self.LabelUpdate.emit(label_score)
    
            if ret:
                frame = cv2.resize(image_np_with_detections, (800, 600))
                Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                #FlippedImage = cv2.flip(Image, 1)
                #ConvertToQtFormat = QImage(FlippedImage.data, FlippedImage.shape[1], FlippedImage.shape[0], QImage.Format_RGB888)
                ConvertToQtFormat = QImage(Image.data, Image.shape[1], Image.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)
                
    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import pics_rc  #TO IMPORT ICONS OF UI
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
